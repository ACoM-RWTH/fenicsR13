# General
# =======
# - output_folder: Used as output folder
output_folder: square_manufactured_solution_3d_r13

# Meshes
# ======
# - meshes: List of input meshes in h5 format to run simulations on
meshes:
  - meshes/cube2.h5
  - meshes/cube3.h5
  # - meshes/cube4.h5
  # - meshes/cube5.h5

# Numerical Parameters
# ====================
# - elements: Must contain the fields: theta, s, p, u, sigma
#   - fields: List of FEM parameters (shape, degree)
#     - shape: Element shape, e.g. Lagrange
#     - degree: Element degree, e.g. 2
# - stabilization: Must contain cip and gls
#   - cip: Collection of Continous Interior Penalty (CIP) parameters
#     - enable: Enable CIP stabilization
#     - delta_theta: Stabilization of grad(T)*grad(T_test) over edge
#     - delta_u: Stabilization of grad(u)*grad(u_test) over edge
#     - delta_p: Stabilization of grad(p)*grad(p_test) over edge
#   - gls: Collection of Garlerkin Least Squares (GLS) parameters
#     - enable: Enable GLS stabilization
#     - tau_energy: Stabilization with energy eq. residual
#     - tau_heatflux: Stabilization with heatflu_x_w eq. residual
#     - tau_mass: Stabilization with mass eq. residual
#     - tau_momentum: Stabilization with momentum eq. residual
#     - tau_stress: Stabilization with stress eq. residual
elements:
  theta:
    shape: Lagrange
    degree: 1
  s:
    shape: Lagrange
    degree: 2
  p:
    shape: Lagrange
    degree: 1
  u:
    shape: Lagrange
    degree: 1
  sigma:
    shape: Lagrange
    degree: 2
stabilization:
  cip:
    enable: False
    delta_theta: 1.0
    delta_u: 1.0
    delta_p: 0.1
  gls:
    enable: False
    tau_energy: 0.001
    tau_heatflux: 0.001
    tau_mass: 0.01
    tau_momentum: 0.01
    tau_stress: 0.01

# Formulation Parameters
# ======================
# - nsd: Number of spatial dimensions == 2
# - mode: Formulation mode, one of heat, stress, r13
# - heat_source: Heat source function for mode==heat||r13
# - mass_source: Mass source function for mode==stress||r13
# - body_force: Body force for mode==stress||r13
# - f_s: Heatflux force for mode==heat||r13
# - f_sigma: Stress force for mode==stress||r13
nsd: 3
mode: r13
heat_source: "2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*((-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2]) + (-1 + x[0])*x[0]*(-1 + x[1])*x[1]*x[2] + (-1 + x[0])*x[0]*(-1 + x[1])*(-1 + x[2])*x[2] + (-1 + x[0])*x[0]*x[1]*(-1 + x[2])*x[2] + (-1 + x[0])*(-1 + x[1])*x[1]*(-1 + x[2])*x[2] + x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2])"
mass_source: 0
body_force: [
  "2*std::pow(-1 + x[0],2)*std::pow(x[0],2)*(-1 + x[1])*x[1]*(-1 + 2*x[1])*std::pow(-1 + x[2],2)*std::pow(x[2],2)",
  "2*(-1 + x[0])*x[0]*(-1 + 2*x[0])*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2)",
  "6*std::pow(-1 + x[0],2)*std::pow(x[0],2)*std::pow(-1 + x[1],2)*std::pow(x[1],2)*(1 - 2*x[2])*(-1 + x[2])*x[2]"
]
f_s: [
  "(2*(-108*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 9*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(16*(-1 + x[2])*x[2] + x[1]*(-16 + 131*x[2] - 99*std::pow(x[2],2)) + std::pow(x[1],2)*(16 - 99*x[2] + 67*std::pow(x[2],2))) + 2*std::pow(x[0],4)*(-18*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 123*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],4)*(-18 + 108*x[2] - 103*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4)) + 4*std::pow(x[1],3)*(9 - 54*x[2] + 59*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],2)*(9 - 54*x[2] + 128*std::pow(x[2],2) - 148*std::pow(x[2],3) + 74*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 390*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 360*x[2] - 1331*std::pow(x[2],2) + 1654*std::pow(x[2],3) - 683*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 360*x[2] - 593*std::pow(x[2],2) + 178*std::pow(x[2],3) + 55*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 360*x[2] + 767*std::pow(x[2],2) - 526*std::pow(x[2],3) + 119*std::pow(x[2],4))) + std::pow(x[0],2)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 678*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 648*x[2] - 3617*std::pow(x[2],2) + 5074*std::pow(x[2],3) - 2105*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 648*x[2] - 2015*std::pow(x[2],2) + 1870*std::pow(x[2],3) - 503*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 648*x[2] + 2477*std::pow(x[2],2) - 2794*std::pow(x[2],3) + 965*std::pow(x[2],4)))))/75.",
  "(2*(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 6*x[0]*x[1]*(-24 + 113*x[1] - 130*std::pow(x[1],2) + 41*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-108*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 9*x[1]*x[2]*(-16 + 115*x[2] - 166*std::pow(x[2],2) + 67*std::pow(x[2],3)) + std::pow(x[1],2)*(-36 + 648*x[2] - 2015*std::pow(x[2],2) + 1870*std::pow(x[2],3) - 503*std::pow(x[2],4)) + 2*std::pow(x[1],4)*(-18 + 108*x[2] - 103*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-36 + 360*x[2] - 593*std::pow(x[2],2) + 178*std::pow(x[2],3) + 55*std::pow(x[2],4))) + 2*std::pow(x[0],3)*(108*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 9*x[1]*x[2]*(-16 + 131*x[2] - 198*std::pow(x[2],2) + 83*std::pow(x[2],3)) + 4*std::pow(x[1],4)*(9 - 54*x[2] + 59*std::pow(x[2],2) - 10*std::pow(x[2],3) + 5*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 360*x[2] + 767*std::pow(x[2],2) - 526*std::pow(x[2],3) + 119*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 648*x[2] + 2477*std::pow(x[2],2) - 2794*std::pow(x[2],3) + 965*std::pow(x[2],4))) - std::pow(x[0],2)*(108*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 9*x[1]*x[2]*(-16 + 163*x[2] - 262*std::pow(x[2],2) + 115*std::pow(x[2],3)) + 4*std::pow(x[1],4)*(9 - 54*x[2] + 128*std::pow(x[2],2) - 148*std::pow(x[2],3) + 74*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(36 - 360*x[2] + 1331*std::pow(x[2],2) - 1654*std::pow(x[2],3) + 683*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 648*x[2] + 3617*std::pow(x[2],2) - 5074*std::pow(x[2],3) + 2105*std::pow(x[2],4)))))/75.",
  "(2*(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 72*x[0]*std::pow(-1 + x[1],2)*std::pow(x[1],2)*x[2]*(-2 + 9*x[2] - 10*std::pow(x[2],2) + 3*std::pow(x[2],3)) + std::pow(x[0],4)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 72*x[1]*x[2]*(-2 + 9*x[2] - 10*std::pow(x[2],2) + 3*std::pow(x[2],3)) + std::pow(x[1],2)*(-108 + 945*x[2] - 1745*std::pow(x[2],2) + 1006*std::pow(x[2],3) - 206*std::pow(x[2],4)) + std::pow(x[1],3)*(216 - 1314*x[2] + 1330*std::pow(x[2],2) + 4*std::pow(x[2],3) - 20*std::pow(x[2],4)) + std::pow(x[1],4)*(-108 + 513*x[2] - 233*std::pow(x[2],2) - 290*std::pow(x[2],3) + 10*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 72*x[1]*x[2]*(-2 + 9*x[2] - 10*std::pow(x[2],2) + 3*std::pow(x[2],3)) + std::pow(x[1],2)*(-108 + 1089*x[2] - 2177*std::pow(x[2],2) + 1294*std::pow(x[2],3) - 206*std::pow(x[2],4)) + std::pow(x[1],4)*(-108 + 657*x[2] - 665*std::pow(x[2],2) - 2*std::pow(x[2],3) + 10*std::pow(x[2],4)) - 2*std::pow(x[1],3)*(-108 + 801*x[2] - 1097*std::pow(x[2],2) + 286*std::pow(x[2],3) + 10*std::pow(x[2],4))) - std::pow(x[0],2)*(36*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 72*x[1]*x[2]*(-2 + 9*x[2] - 10*std::pow(x[2],2) + 3*std::pow(x[2],3)) + std::pow(x[1],3)*(-216 + 2178*x[2] - 4354*std::pow(x[2],2) + 2588*std::pow(x[2],3) - 412*std::pow(x[2],4)) + std::pow(x[1],4)*(108 - 945*x[2] + 1745*std::pow(x[2],2) - 1006*std::pow(x[2],3) + 206*std::pow(x[2],4)) + std::pow(x[1],2)*(108 - 1377*x[2] + 3257*std::pow(x[2],2) - 2302*std::pow(x[2],3) + 422*std::pow(x[2],4)))))/75."
]
f_sigma: [
  [
    "(-36*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[0]*x[1]*(13 - 10*x[1] - 32*std::pow(x[1],2) + 29*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-12*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 64*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],3)*(72 - 416*x[2] + 338*std::pow(x[2],2) + 124*std::pow(x[2],3) - 46*std::pow(x[2],4)) + std::pow(x[1],2)*(-36 + 208*x[2] - 225*std::pow(x[2],2) + 50*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 177*std::pow(x[2],2) - 46*std::pow(x[2],3) + 15*std::pow(x[2],4))) + 2*std::pow(x[0],3)*(12*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 40*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(36 - 208*x[2] - 71*std::pow(x[2],2) + 542*std::pow(x[2],3) - 263*std::pow(x[2],4)) + std::pow(x[1],4)*(36 - 208*x[2] + 193*std::pow(x[2],2) + 14*std::pow(x[2],3) + std::pow(x[2],4)) + 2*std::pow(x[1],3)*(-36 + 208*x[2] - 81*std::pow(x[2],2) - 238*std::pow(x[2],3) + 111*std::pow(x[2],4))) + std::pow(x[0],2)*(-12*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 248*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],4)*(-36 + 208*x[2] - 441*std::pow(x[2],2) + 482*std::pow(x[2],3) - 249*std::pow(x[2],4)) + std::pow(x[1],3)*(72 - 416*x[2] + 242*std::pow(x[2],2) + 316*std::pow(x[2],3) - 142*std::pow(x[2],4)) + std::pow(x[1],2)*(-36 + 208*x[2] + 447*std::pow(x[2],2) - 1294*std::pow(x[2],3) + 639*std::pow(x[2],4))))/30.",
    "(-62*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 48*x[0]*x[1]*(-1 + 11*x[1] - 18*std::pow(x[1],2) + 8*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 24*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 153*std::pow(x[2],2) + 66*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],3)*(40 - 240*x[2] + 234*std::pow(x[2],2) + 12*std::pow(x[2],3) - 6*std::pow(x[2],4)) + 5*std::pow(x[1],4)*(-4 + 24*x[2] - 21*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 72*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 309*std::pow(x[2],2) + 378*std::pow(x[2],3) - 189*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 120*x[2] - 117*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 120*x[2] + 177*std::pow(x[2],2) - 114*std::pow(x[2],3) + 57*std::pow(x[2],4))) + std::pow(x[0],2)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 168*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 993*std::pow(x[2],2) + 1746*std::pow(x[2],3) - 873*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 120*x[2] - 513*std::pow(x[2],2) + 786*std::pow(x[2],3) - 393*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 120*x[2] + 669*std::pow(x[2],2) - 1098*std::pow(x[2],3) + 549*std::pow(x[2],4))))/30.",
    "(2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(std::pow(x[0],2)*(-3 + 5*x[1] + std::pow(x[1],2))*(-1 + 2*x[2]) - (-1 + x[1])*x[1]*(-2 + 3*x[2] + std::pow(x[2],2)) + x[0]*(-3 + 6*x[2] + x[1]*(9 - 16*x[2] - 2*std::pow(x[2],2)) + std::pow(x[1],2)*(-3 + 4*x[2] + 2*std::pow(x[2],2)))))/5."
  ], [
    "(-62*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 48*x[0]*x[1]*(-1 + 11*x[1] - 18*std::pow(x[1],2) + 8*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 24*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 153*std::pow(x[2],2) + 66*std::pow(x[2],3) - 33*std::pow(x[2],4)) + std::pow(x[1],3)*(40 - 240*x[2] + 234*std::pow(x[2],2) + 12*std::pow(x[2],3) - 6*std::pow(x[2],4)) + 5*std::pow(x[1],4)*(-4 + 24*x[2] - 21*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 72*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 309*std::pow(x[2],2) + 378*std::pow(x[2],3) - 189*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 120*x[2] - 117*std::pow(x[2],2) - 6*std::pow(x[2],3) + 3*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 120*x[2] + 177*std::pow(x[2],2) - 114*std::pow(x[2],3) + 57*std::pow(x[2],4))) + std::pow(x[0],2)*(-2*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 168*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-20 + 120*x[2] - 993*std::pow(x[2],2) + 1746*std::pow(x[2],3) - 873*std::pow(x[2],4)) + std::pow(x[1],4)*(-20 + 120*x[2] - 513*std::pow(x[2],2) + 786*std::pow(x[2],3) - 393*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(20 - 120*x[2] + 669*std::pow(x[2],2) - 1098*std::pow(x[2],3) + 549*std::pow(x[2],4))))/30.",
    "(-12*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 8*x[0]*x[1]*(-17 + 59*x[1] - 50*std::pow(x[1],2) + 8*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[0],4)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 232*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 208*x[2] - 441*std::pow(x[2],2) + 482*std::pow(x[2],3) - 249*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 208*x[2] + 193*std::pow(x[2],2) + 14*std::pow(x[2],3) + std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 177*std::pow(x[2],2) - 46*std::pow(x[2],3) + 15*std::pow(x[2],4))) - 2*std::pow(x[0],3)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 368*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 208*x[2] - 841*std::pow(x[2],2) + 1282*std::pow(x[2],3) - 649*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 169*std::pow(x[2],2) - 62*std::pow(x[2],3) + 23*std::pow(x[2],4)) + std::pow(x[1],3)*(72 - 416*x[2] + 642*std::pow(x[2],2) - 484*std::pow(x[2],3) + 258*std::pow(x[2],4))) + std::pow(x[0],2)*(-36*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 640*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 208*x[2] - 1713*std::pow(x[2],2) + 3026*std::pow(x[2],3) - 1521*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 225*std::pow(x[2],2) + 50*std::pow(x[2],3) - 33*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 208*x[2] + 649*std::pow(x[2],2) - 898*std::pow(x[2],3) + 457*std::pow(x[2],4))))/30.",
    "(2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(7*(-1 + x[1])*x[1]*(-1 + 2*x[2]) + x[0]*(-2 + std::pow(x[1],2)*(15 - 30*x[2]) + 3*x[2] + std::pow(x[2],2) + x[1]*(-11 + 24*x[2] - 2*std::pow(x[2],2))) + std::pow(x[0],2)*(2 - 3*x[2] - std::pow(x[2],2) + std::pow(x[1],2)*(-1 + 2*x[2]) + x[1]*(-3 + 4*x[2] + 2*std::pow(x[2],2)))))/5."
  ], [
    "(2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(std::pow(x[0],2)*(-3 + 5*x[1] + std::pow(x[1],2))*(-1 + 2*x[2]) - (-1 + x[1])*x[1]*(-2 + 3*x[2] + std::pow(x[2],2)) + x[0]*(-3 + 6*x[2] + x[1]*(9 - 16*x[2] - 2*std::pow(x[2],2)) + std::pow(x[1],2)*(-3 + 4*x[2] + 2*std::pow(x[2],2)))))/5.",
    "(2*(-1 + x[0])*x[0]*(-1 + x[1])*x[1]*(-1 + x[2])*x[2]*(7*(-1 + x[1])*x[1]*(-1 + 2*x[2]) + x[0]*(-2 + std::pow(x[1],2)*(15 - 30*x[2]) + 3*x[2] + std::pow(x[2],2) + x[1]*(-11 + 24*x[2] - 2*std::pow(x[2],2))) + std::pow(x[0],2)*(2 - 3*x[2] - std::pow(x[2],2) + std::pow(x[1],2)*(-1 + 2*x[2]) + x[1]*(-3 + 4*x[2] + 2*std::pow(x[2],2)))))/5.",
    "(24*std::pow(-1 + x[1],2)*std::pow(x[1],2)*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 4*x[0]*x[1]*(-4 + 49*x[1] - 82*std::pow(x[1],2) + 37*std::pow(x[1],3))*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 2*std::pow(x[0],3)*(-24*std::pow(-1 + x[2],2)*std::pow(x[2],2) + 164*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],2)*(-36 + 208*x[2] - 385*std::pow(x[2],2) + 370*std::pow(x[2],3) - 193*std::pow(x[2],4)) + 2*std::pow(x[1],3)*(36 - 208*x[2] + 201*std::pow(x[2],2) - 2*std::pow(x[2],3) + 9*std::pow(x[2],4)) + std::pow(x[1],4)*(-36 + 208*x[2] - 181*std::pow(x[2],2) - 38*std::pow(x[2],3) + 11*std::pow(x[2],4))) + std::pow(x[0],4)*(24*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 148*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],4)*(36 - 208*x[2] + 177*std::pow(x[2],2) + 46*std::pow(x[2],3) - 15*std::pow(x[2],4)) + std::pow(x[1],3)*(-72 + 416*x[2] - 362*std::pow(x[2],2) - 76*std::pow(x[2],3) + 22*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 208*x[2] + 333*std::pow(x[2],2) - 266*std::pow(x[2],3) + 141*std::pow(x[2],4))) + std::pow(x[0],2)*(24*std::pow(-1 + x[2],2)*std::pow(x[2],2) - 196*x[1]*std::pow(-1 + x[2],2)*std::pow(x[2],2) + std::pow(x[1],3)*(-72 + 416*x[2] - 770*std::pow(x[2],2) + 740*std::pow(x[2],3) - 386*std::pow(x[2],4)) + std::pow(x[1],4)*(36 - 208*x[2] + 333*std::pow(x[2],2) - 266*std::pow(x[2],3) + 141*std::pow(x[2],4)) + std::pow(x[1],2)*(36 - 208*x[2] + 633*std::pow(x[2],2) - 866*std::pow(x[2],3) + 441*std::pow(x[2],4))))/15."
  ]
]

# Solver Parameters
# =================
# - solver_name: e.g. mumps for 2D, gmres for 3D
# - preconditioner: e.g. icc, only for iterative solvers. Set to none otherwise
solver:
  solver_name: mumps
  preconditioner: none

# Region Parameters
# =================
# - regs: Dictionary of all mesh regions
#   - reg_id: Must contain the following parameters:
#     - kn: Knudsen number
regs:
  6000:
    kn: 1.0

# Boundary Conditions
# ===================
# - polar_coord_syst: true needs u_n_w,u_t_w; false needs u_x_w,u_y_w,u_z_w
# - bcs: Dictionary of all boundary IDs from mesh
#   - bc_id: must contain the following parameters
#     - chi_tilde: Refaction coefficient in Maxwell accomodation model
#     - theta_w: Value for temperature at wall
#     - u_t_w: Value for tangential velocity at wall (for polar_coord_syst=true)
#     - u_n_w: Value for normal velocity at wall (for polar_coord_syst=true)
#     - u_x_w: Value for x-velocity at wall (for polar_coord_syst=false)
#     - u_y_w: Value for y-velocity at wall (for polar_coord_syst=false)
#     - u_z_w: Value for z-velocity at wall (for polar_coord_syst=false&&nsd=3)
#     - p_w: Value for pressure at wall
#     - epsilon_w: Inflow-model parameter <=> Weight of pressure prescription
polar_coord_syst: False
bcs:
  4000:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4001: # right
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4002: # bot
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4003:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4004:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0
  4005:
    chi_tilde: 1
    theta_w: 0
    u_t_w: 0
    u_n_w: 0
    u_x_w: 0
    u_y_w: 0
    u_z_w: 0
    p_w: 0
    epsilon_w: 0

# Convergence Study
# =================
# - enable: Enable convergence study on given meshes
# - exact_solution: Path to exact solution in cpp-format to compare errors
# - plot: Show errors in matplotlib window. PDF output is always per default.
# - write_systemmatrix: Writes out systemmatrix (LHS) to use for analysis
# - rescale_pressure: Shift numerical pressure (False,zeromean,zerominimum)
# - relative_errors: Use relative errors. If exact sol. is zero, use absolute.
convergence_study:
  enable: True
  exact_solution: esols/3d.cpp
  plot: False # to avoid error exit code due to $DISPLAY
  write_systemmatrix: False
  rescale_pressure: zerominimum
  relative_error: True

# Postprocessing
# ==============
# - write_pdfs: Write all solution fields as PDF plot
# - write_vecs: Write all solution fields as vectors
# - massflow: List of BC IDs to compute massflow J=int_bc dot(u,n) ds
# - line_integrals: List of line integral dicts:
#   - name: Name for output
#   - expr: Expression to evaluate
#   - start: Start point
#   - end: End point
#   - res: Sampling resolution of line
postprocessing:
  write_pdfs: False
  write_vecs: False
  massflow: []
  line_integrals: []

# Parameter Study
# ==============
# - enable: Repeat simulation with different p. values (study)
# - parameter_key: Key as list, e.g. ["elemenets", "p", "degree"]
# - parameter_values: List of value for parameter, e.g. [0.01,0.1,1,10]
parameter_study:
  enable: False
  parameter_key: []
  parameter_values: []
